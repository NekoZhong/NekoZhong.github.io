(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{379:function(t,a,s){"use strict";s.r(a);var e=s(28),i=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"git"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git"}},[t._v("#")]),t._v(" Git")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),s("p",[t._v("我在2018年曾录制了三个与Git相关的"),s("a",{attrs:{href:"https://www.bilibili.com/video/BV1zp411o7y6/",target:"_blank",rel:"noopener noreferrer"}},[t._v("视频"),s("OutboundLink")],1),t._v("，用于帮助入门的小白搭建个人博客。当时之所以录制视频，是因为我自己想要搭建博客时，没有找到足够简单易懂的视频教程（现在B站已经有很多优秀视频了，当时也许也有很多优秀的，只是我没找到- -），索性就自己录制了一套视频。三年过去，回看我当时的视频，有很多错漏不足之处，现在通过这篇博客来进行修正和补充。")])]),t._v(" "),s("h2",{attrs:{id:"git的定义"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git的定义"}},[t._v("#")]),t._v(" Git的定义")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("Git是一个开源的分布式版本控制系统。\n")])])]),s("p",[t._v("这句话是我一开始接触Git时看到的第一句话。")]),t._v(" "),s("p",[t._v("版本管理就是管理更新的历史记录。例如记录添加或更改源代码的过程，回滚到特定阶段，恢复误删除的文件等。")]),t._v(" "),s("p",[t._v("如果只是想要浅显地去理解它，可以将它理解为一个协助多人开发的工具。既然是工具，显然学会怎么使用它，比理解它的概念和原理来得更重要。（概念当然很重要，透彻且深入地理解它，能帮助你更好的使用Git。但如果你急于在开发过程中使用Git，那显然知道如何使用比理解概念的优先级更高。）")]),t._v(" "),s("p",[t._v("所以，我们可以先将Git用起来，相关的概念可以在使用过程中一点点补充了解。")]),t._v(" "),s("p",[t._v("在我录制的三个有关Git的"),s("a",{attrs:{href:"https://www.bilibili.com/video/BV1zp411o7y6/",target:"_blank",rel:"noopener noreferrer"}},[t._v("视频"),s("OutboundLink")],1),t._v("中，其实我们已经初步使用了Git的部分功能。现在就让我们来进一步补充它的概念。")]),t._v(" "),s("h2",{attrs:{id:"什么是git"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是git"}},[t._v("#")]),t._v(" 什么是Git")]),t._v(" "),s("p",[t._v("Git是一款免费、开源的分布式版本控制系统，最早由LinilusTorvalds创建，用于管理Linux内核开发，现已成为分布式版本控制的主流工具。")]),t._v(" "),s("h2",{attrs:{id:"git的出现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git的出现"}},[t._v("#")]),t._v(" Git的出现")]),t._v(" "),s("p",[t._v("首先，我们得承认：很多工具的出现是为了解决问题的。Git这个工具出现就是为了解决多人协作下的版本管理问题。")]),t._v(" "),s("p",[t._v("Linus Torvalds是Git的作者，同时也是Linux之父。在他一次采访中，他承认，他不想和太多人一起工作，Git的出现其实是为了解决Linux核心开发过程中多人协作带来的麻烦。（如果你对此感兴趣的话，可以看一下他的采访视频。"),s("a",{attrs:{href:"https://open.163.com/newview/movie/free?pid=MBPNHJU6K&mid=MBR358639",target:"_blank",rel:"noopener noreferrer"}},[t._v("Ted采访"),s("OutboundLink")],1),t._v(" )")]),t._v(" "),s("p",[t._v("当时，有成百上千的人对Linux提出很细微的修改意见，这为Linux的版本管理带来了巨大的工作量。为了解决这些琐碎恼人的事情，他开发Git，帮助他和团队更好的管理Linux这个项目。")]),t._v(" "),s("p",[t._v("Git的出现，是为了解决当下的需求。具备极强的实用性，适用于多个场景。")]),t._v(" "),s("h2",{attrs:{id:"git的特性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git的特性"}},[t._v("#")]),t._v(" Git的特性")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),s("p",[t._v("以下内容总结自书籍《Git版本控制管理》")])]),t._v(" "),s("ul",[s("li",[s("p",[t._v("有助于分布式开发。允许并行开发，各人可以在自己的版本库中独立且同时地开发，而不需要与一个中心版本库时刻同步（因为这样会造成开发瓶颈）。它允许许多开发人员在不同的地方，甚至是离线的情况下，无障碍地开发。")])]),t._v(" "),s("li",[s("p",[t._v("能够胜任上千开发人员的规模。能够很好地支持非常多的开发人员，并有效可靠地将多人的开发工作进行整合。")])]),t._v(" "),s("li",[s("p",[t._v("性能优异。能够节省存储空间并进行差异比较。")])]),t._v(" "),s("li",[s("p",[t._v("保持完整性和可靠性。能够绝对保证数据的完整性和不会被意外修改。")])]),t._v(" "),s("li",[s("p",[t._v("强化责任。对每一个有文件改动的提交（Git把一个历史版本叫做一个“提交”）强制使用“改动日志”。“改动日志”中存储的信息由开发人员、项目需求、管理策略等决定。确保文件不会被莫名地修改，可以对所有的改动进行责任追踪（比如：能够定位谁改动了文件，甚至改动的原因)。")])]),t._v(" "),s("li",[s("p",[t._v("不可变性。一旦创建数据对象并把它们存放到数据库中，它们便不可修改。重新创建只是产生新的数据对象，原始数据对象并不会被替换。使用不可变的对象有诸多优势，包括快速比较相同性。")])]),t._v(" "),s("li",[s("p",[t._v("原子事务。操作要么全部执行要么一个都不执行。这个特性可以确保在进行更新或者提交操作时，版本数据库不会陷入部分改变或者破损的状态。Git通过记录完整、离散的版本库状态来实现原子事务。而这些版本库状态都无法再分解成更小的独立状态。")])]),t._v(" "),s("li",[s("p",[t._v("支持并且鼓励基于分支的开发。支持在同一个项目中存在多个“支线”。可以将一条支线分叉为多条支线，在以后再将差异化后的支线合并。")])]),t._v(" "),s("li",[s("p",[t._v("完整的版本库。为了让各个开发人员不需要查询中心服务器就可以得到历史修订信息，每个人的版本库中都有一份关于每个文件的完整历史修订信息。")])]),t._v(" "),s("li",[s("p",[t._v("一个清晰的内部设计。能够保存原始数据最基本的部分和目录结构，能够记录变更内容等。再将这个对象模型和全局唯一标识符技术相结合，便可以得到一个用于分布式开发环境中的清晰数据对象。")])]),t._v(" "),s("li",[s("p",[t._v("免费自由。")])])]),t._v(" "),s("h2",{attrs:{id:"安装git"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#安装git"}},[t._v("#")]),t._v(" 安装Git")]),t._v(" "),s("p",[t._v("windows安装：进入网站https://git-scm.com/下载安装，按照常规软件操作流程一步步安装即可。")]),t._v(" "),s("p",[t._v("centos8安装：yum install git")]),t._v(" "),s("h2",{attrs:{id:"git常用命令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git常用命令"}},[t._v("#")]),t._v(" Git常用命令")]),t._v(" "),s("p",[t._v("查看git版本：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("$ git --version\n")])])]),s("p",[t._v("克隆git仓库：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("$ git clone\n")])])]),s("p",[t._v("查看提交历史：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("$ git log\n")])])]),s("p",[t._v("在.git下初始创建一个空的git仓库：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("$ git init\n")])])]),s("p",[t._v("使用git add file 将file 添加到版本库中。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("$ git add （文件名）\n")])])]),s("p",[t._v("命令让Git把当前目录及子目录中的文件都添加到版本库里（参数“.”、点或者UNIX说法中的“dot”，是当前目录的简写）")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("$ git add .\n")])])]),s("p",[t._v("查看add 和 commit 二者之间的中间状态")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("$ git status\n")])])]),s("p",[t._v("在配置文件里保存基础信息，如：作者、邮箱等")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('$ git config \n$ git config --global user.name "Firstname Lastname"\n$ git config --global user.email "your_email@example.com"\n')])])]),s("p",[t._v("查看配置信息,输入q退出")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("$ git config -l\n")])])]),s("p",[t._v("将filename文件在工作区的修改撤销到最近一次")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("$ git checkout --filename\n")])])]),s("p",[t._v("将最近一次提交撤回,回退所有内容到上一个版本")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("$ git reset HEAD^\n")])])]),s("p",[t._v("回退filename文件的版本到上一个版本")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("$ git reset HEAD^ filename  \n")])])]),s("p",[t._v("创建新分支")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("$ git branch branchname\n")])])]),s("p",[t._v("创建新分支并切换到branchname分支上")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("$ git checkout -b branchname\n")])])]),s("p",[t._v("切换到branchname分支上")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("$ git checkout branchname\n")])])]),s("p",[t._v("在master分支上操作，将branchname分支合并进主分支")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("$ git merge branchname\n")])])]),s("p",[t._v("删除branchname分支")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("$ git branch -d branchname\n")])])]),s("h2",{attrs:{id:"git使用过程中遇到的问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git使用过程中遇到的问题"}},[t._v("#")]),t._v(" Git使用过程中遇到的问题")]),t._v(" "),s("p",[t._v("在没有任何commit的情况下，在work tree 创建多个分支，且git branch没有打印任何东西的情况下切换分支")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("$ git checkout branchname\n")])])]),s("div",{staticClass:"custom-block danger"},[s("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),s("p",[t._v("error: pathspec 'dev' did not match any file(s) known to git")])]),t._v(" "),s("p",[t._v("解决：其实就是因为这两个都是空的分支，创建和切换没意义")]),t._v(" "),s("h2",{attrs:{id:"github"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#github"}},[t._v("#")]),t._v(" Github")]),t._v(" "),s("p",[t._v("GitHub 与 Git 是完全不同的两个东西。在 Git 中，开发者将源代码存入名叫“Git 仓库”的资料库中并加以使用。而 GitHub 则是在网络上提供 Git 仓库的一项服务。")]),t._v(" "),s("p",[t._v("GitHub 是为开发者提供 Git 仓库的托管服务。这是一个让开发者与朋友、同事、同学及陌生人共享代码的完美场所。")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("注册GitHub账号，并创建仓库")])]),t._v(" "),s("li",[s("p",[t._v("密钥/access token")])])]),t._v(" "),s("h2",{attrs:{id:"未完待续"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#未完待续"}},[t._v("#")]),t._v(" 未完待续")]),t._v(" "),s("cat")],1)}),[],!1,null,null,null);a.default=i.exports}}]);